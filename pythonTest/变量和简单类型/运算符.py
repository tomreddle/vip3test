# 赋值运算符   =
# 将表达式的值付给另一个变量,或将一个变量的值赋给另一个变量
d1 = 12.34
d2 = d1 + 5
print("d2的值是：%g" % d2)
st = "Python"
pi = 3.14
visited = True
st2 = st
print(st2)  # Python
# python 的赋值表达式是有值的，所以赋值表达式可以被赋给别的变量，即Python支持持续赋值
a = b = c = 20
print(a, b, c, sep='\t')

# 算术运算符
# +加 -减 *乘 /除 //整除  %取余  **幂运算
# + 加法运算符可以进行数值运算，也可以进行字符串的拼接
a = 5.2
b = 3.1
the_sum = a + b
print("the_num的值是：%g" % (a+b))
# 字符串拼接
s1 = 'Hello'
s2 = 'Charlie'
# 使用 + 对字符串进行拼接
print(s1 + s2)      # HelloCharlie
# - 减法运算符，除了数字运算还可以作为求负运算符
c = 5.2
d = 3.1
print(c + d)        # 8.3
# 求负
x = -5.0
x = -x
print(x)        # 5.0
# * 乘法运算符
# 除了进行数值运算之外，还可以表示将N个字符串连接起来
e = 5.2
f = 3.1
multiply = e * f
print("multiply的值是：",multiply)      # multiply的值是： 16.12
# N个字符串连接
s3 = 'crazy '
print(s3 * 3)       # crazy crazy crazy

# / 或 //  除法运算符
# /表示普通除法，得到的结果与平时数学计算的结果相同
# //表示整除，使用它得出的结果只有整数部分，小数部分会被舍弃
print("19/4的结果是：", 19/4)
print("19//4的结果是：", 19//4)
aa = 5.2
bb = 3.1
# aa/bb的值是1.6774193548387097
print(aa/bb)
# aa//bb的值是 1.0
print(aa//bb)

# % 取余运算符
# python取余运算支持对浮点数取余，即两个操作数不必须是整数
# 取余运算的结果也不一定是整数
# 注意：取余运算python中的实现方式是，被除数-除数×整除的结果
print("5%3的值是：", 5 % 3)                 # 5%3的值是： 2
print("5.2%3.1的值是：", 5.2 % 3.1)         # 5.2%3.1的值是： 2.1
print("-5.2%-3.1的值是：", -5.2 % -3.1)     # -5.2%-3.1的值是： -2.1
print("5.2%-2.9的值是：", 5.2 % -2.9)       # 5.2%-2.9的值是： -0.5999999999999996
print("5.2%-1.5的值是：", 5.2 % -1.5)       # 5.2%-1.5的值是： -0.7999999999999998
print("-5.2%1.5的值是：", -5.2 % 1.5)       # -5.2%1.5的值是： 0.7999999999999998
# print("5%0.0的值是：", 5 % 0.0)     # -5.2%1.5

# **幂运算
# 数学的乘方运算
print("5的2次方", 5 ** 2)      # 5的2次方 25
print("4的3次方", 4 ** 3)      # 4的3次方 64
print("4的开平方", 4 ** 0.5)    # 4的开平方 2.0
print("5的开3次方", 5 ** (1 / 3))   # 5的开3次方 1.7099759466766968

# 位运算符
# 直接操作数值原始的bit位
# 有6中：
# & 按位与
# | 按位或
# ^ 按位异或
# ~ 按位取反
# << 左移
# >> 右移
# 计算机底层以补码的形式保存所有整数：正数的补码和原码相同；负数的补码为原码的反码（符号位不变，按位取反）+1
print(5 ^ 9)
# 0000 0101
# 0000 1001
# 0000 1100 = d12
# 左移,将操作数的二进制整体左移指定的位数，左移后，右边补零
print(5 << 2)  # 20
# 0000 0101
# 0001 0100  = 20
print(-5 << 2)  # -20
# 1000 0101 -5的原码
# 1111 1010 -5的反码
# 1111 1011 -5的补码
# 1110 1100 补码左移2位
# 1110 1011    取反码
# 1001 0100  取原码 = -20

# >> 右移，将第一个操作数的二进制码右移指定的位数，左边空出来的位以原来的符号位填充，即，第一个操作数是正数左边补0 ，
# 第一个操作数数负数左边补1
print(-5 >> 2)
# 1000 0101 -5的原码
# 1111 1010 -5的反码
# 1111 1011 -5的补码
# 1111 1110  右移两位，符号位补齐左侧
# 1111 1101
# 1000 0010  = -2
# 注意：
# 进行位移运算时，左移n位相当于乘2的n次方
# 右移n位相当于除2的n次方，如果不能整除，实际返回的是小于除的结果的最大整数
# 位运算并不会改变原来的操作数

# 赋值运算符的扩展
#  +=: x += y  等价于 x = x + y
#  -=: x -= y  等价于 x = x - y
#  *=: x *= y  等价于 x = x * y
#  /=: x /= y  等价于 x = x / y
#  //=: x //= y  等价于 x = x // y
#  %=: x %= y  等价于 x = x % y
#  **=: x **= y  等价于 x = x ** y
#  &=: x &= y  等价于 x = x & y
#  |=: x |= y  等价于 x = x | y
#  ^=: x ^= y  等价于 x = x ^ y
#  <<=: x <<= y  等价于 x = x << y
#  >>=: x >>= y  等价于 x = x >> y

# 索引运算符
a = 'abcdefghijklmn'
# 获取索引2到6的子串，步长位3
print(a[2:6:3])     # cf
# 获取索引2到8的子串，步长位2
print(a[2:8:2])     # ceg

# 比较运算符和bool类型
# 比较运算符包括：>  <  >=  <=   == !=  is  is not
# 其中 == 判断运算符两边的值是否相等
# is则是判断连个变量所引用的对象是否相等
import time
# 获取当前时间
a = time.gmtime()
b = time.gmtime()
c = a
print(a == b)   # True
print(a == c)   # True
print(a is b)   # False
print(a is c)   # True
# python 提供了id()函数来判断变量所引用的地址，如果地址相同则说明引用的是同一个对象
print(id(a))    # 2299742997816
print(id(b))    # 2299742997096
print(id(c))    # 2299742997816

# 逻辑运算符
# python的逻辑运算符有三个： 与 或 非；and  or  not
# 示例
# 直接对False求非运算，返回True
print(not False)        # True
# 5>3返回True，20.0大于10  ，返回True
print(5 > 3 and 20.0 > 10)  # True
# 4>=5 返回False，"c">"a"返回True，求或后返回True
print(4 >= 5 or "c" > "a")      # True

# 三目运算符
# 通过if语句来实现三目运算符的功能，因此近似的把这种if语句当成三目运算符
# 格式： True_statements if expression else Fasle_statements
# 规则：先对逻辑表达式求值，如果逻辑表达式返回True，则执行并返回True_statements；
#       如果逻辑表达式的结果是False，则执行并返回Fasle_statements
a = 5
b = 3
st = "a 大于 b" if a > b else "a 不大于 b"
print(st)   # a 大于 b
# 如果只是为了输出控制台上的信息，可使用如下方式
print("a 大于 b") if a > b else print("a 不大于 b")
# python 允许三目运算符的True_statements 和Fasle_statements中放置多条语句，主要支持两种放置方式：
#   多条语句以英文逗号隔开：每条语句都会执行，程序返回多条语句的返回值组成的元组
#   多条语句以英文分号隔开：每条语句都会执行，程序返回第一条语句的返回值

# in运算符
# 用于判断某个成员是否在序列中
s = 'crazyit.org'
print('it' in s)         # True
print('it' not in s)        # False
print('fkit' in s)          # False
print('fkit' not in s)      # True

# 运算符的优先级

